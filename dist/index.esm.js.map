{"version":3,"file":"index.esm.js","sources":["../src/datastore.js","../src/user.js","../src/brain.js","../src/response.js","../src/message.js","../src/middleware.js","../src/listener.js","../src/robot.ts","../src/adapter.js","../src/index.ts"],"sourcesContent":["class DataStore {\n  // Represents a persistent, database-backed storage for the robot. Extend this.\n  //\n  // Returns a new Datastore with no storage.\n  constructor(robot) {\n    this.robot = robot\n  }\n\n  // Public: Set value for key in the database. Overwrites existing\n  // values if present. Returns a promise which resolves when the\n  // write has completed.\n  //\n  // Value can be any JSON-serializable type.\n  set(key, value) {\n    return this._set(key, value, \"global\")\n  }\n\n  // Public: Assuming `key` represents an object in the database,\n  // sets its `objectKey` to `value`. If `key` isn't already\n  // present, it's instantiated as an empty object.\n  setObject(key, objectKey, value) {\n    return this.get(key).then((object) => {\n      const target = object || {}\n      target[objectKey] = value\n      return this.set(key, target)\n    })\n  }\n\n  // Public: Adds the supplied value(s) to the end of the existing\n  // array in the database marked by `key`. If `key` isn't already\n  // present, it's instantiated as an empty array.\n  setArray(key, value) {\n    return this.get(key).then((object) => {\n      const target = object || []\n      // Extend the array if the value is also an array, otherwise\n      // push the single value on the end.\n      if (Array.isArray(value)) {\n        return this.set(key, target.push.apply(target, value))\n      }\n      return this.set(key, target.concat(value))\n    })\n  }\n\n  // Public: Get value by key if in the database or return `undefined`\n  // if not found. Returns a promise which resolves to the\n  // requested value.\n  get(key) {\n    return this._get(key, \"global\")\n  }\n\n  // Public: Digs inside the object at `key` for a key named\n  // `objectKey`. If `key` isn't already present, or if it doesn't\n  // contain an `objectKey`, returns `undefined`.\n  getObject(key, objectKey) {\n    return this.get(key).then((object) => {\n      const target = object || {}\n      return target[objectKey]\n    })\n  }\n\n  // Private: Implements the underlying `set` logic for the datastore.\n  // This will be called by the public methods. This is one of two\n  // methods that must be implemented by subclasses of this class.\n  // `table` represents a unique namespace for this key, such as a\n  // table in a SQL database.\n  //\n  // This returns a resolved promise when the `set` operation is\n  // successful, and a rejected promise if the operation fails.\n  _set(key, value, table) {\n    return Promise.reject(\n      new DataStoreUnavailable(\"Setter called on the abstract class.\")\n    )\n  }\n\n  // Private: Implements the underlying `get` logic for the datastore.\n  // This will be called by the public methods. This is one of two\n  // methods that must be implemented by subclasses of this class.\n  // `table` represents a unique namespace for this key, such as a\n  // table in a SQL database.\n  //\n  // This returns a resolved promise containing the fetched value on\n  // success, and a rejected promise if the operation fails.\n  _get(key, table) {\n    return Promise.reject(\n      new DataStoreUnavailable(\"Getter called on the abstract class.\")\n    )\n  }\n}\n\nclass DataStoreUnavailable extends Error {}\n\nexport { DataStore, DataStoreUnavailable }\n","import { DataStoreUnavailable } from \"./datastore\"\n\nclass User {\n  // Represents a participating user in the chat.\n  //\n  // id      - A unique ID for the user.\n  // options - An optional Hash of key, value pairs for this user.\n  constructor(id, options) {\n    this.id = id\n\n    if (options == null) {\n      options = {}\n    }\n\n    // Define a getter method so we don't actually store the\n    // robot itself on the user object, preventing it from\n    // being serialized into the brain.\n    if (options.robot) {\n      const { robot } = options\n      delete options.robot\n      this._getRobot = function () {\n        return robot\n      }\n    } else {\n      this._getRobot = function () {}\n    }\n\n    Object.keys(options).forEach((key) => {\n      this[key] = options[key]\n    })\n\n    if (!this.name) {\n      this.name = this.id.toString()\n    }\n  }\n\n  set(key, value) {\n    this._checkDatastoreAvailable()\n    return this._getDatastore()._set(this._constructKey(key), value, \"users\")\n  }\n\n  get(key) {\n    this._checkDatastoreAvailable()\n    return this._getDatastore()._get(this._constructKey(key), \"users\")\n  }\n\n  _constructKey(key) {\n    return `${this.id}+${key}`\n  }\n\n  _checkDatastoreAvailable() {\n    if (!this._getDatastore()) {\n      throw new DataStoreUnavailable(\"datastore is not initialized\")\n    }\n  }\n\n  _getDatastore() {\n    const robot = this._getRobot()\n    if (robot) {\n      return robot.datastore\n    }\n  }\n}\n\nexport default User\n","import Emittery from \"emittery\"\n\nimport User from \"./user\"\n\n// If necessary, reconstructs a User object. Returns either:\n//\n// 1. If the original object was falsy, null\n// 2. If the original object was a User object, the original object\n// 3. If the original object was a plain JavaScript object, return\n//    a User object with all of the original object's properties.\nconst reconstructUserIfNecessary = function (user, robot) {\n  if (!user) {\n    return null\n  }\n\n  if (\n    !user.constructor ||\n    (user.constructor && user.constructor.name !== \"User\")\n  ) {\n    const { id } = user\n    delete user.id\n    // Use the old user as the \"options\" object,\n    // populating the new user with its values.\n    // Also add the `robot` field so it gets a reference.\n    user.robot = robot\n    const newUser = new User(id, user)\n    delete user.robot\n\n    return newUser\n  }\n  return user\n}\n\nclass Brain extends Emittery {\n  // Represents somewhat persistent storage for the robot. Extend this.\n  //\n  // Returns a new Brain with no external storage.\n  constructor(robot) {\n    super()\n    this.data = {\n      users: {},\n      _private: {},\n    }\n    this.getRobot = function () {\n      return robot\n    }\n\n    this.autoSave = true\n\n    robot.on(\"running\", () => {\n      this.resetSaveInterval(5)\n    })\n  }\n\n  // Public: Store key-value pair under the private namespace and extend\n  // existing @data before emitting the 'loaded' event.\n  //\n  // Returns the instance for chaining.\n  set(key, value) {\n    let pair\n    if (key === Object(key)) {\n      pair = key\n    } else {\n      pair = {}\n      pair[key] = value\n    }\n\n    Object.keys(pair).forEach((key) => {\n      this.data._private[key] = pair[key]\n    })\n\n    this.emit(\"loaded\", this.data)\n\n    return this\n  }\n\n  // Public: Get value by key from the private namespace in @data\n  // or return null if not found.\n  //\n  // Returns the value.\n  get(key) {\n    return this.data._private[key] != null ? this.data._private[key] : null\n  }\n\n  // Public: Remove value by key from the private namespace in @data\n  // if it exists\n  //\n  // Returns the instance for chaining.\n  remove(key) {\n    if (this.data._private[key] != null) {\n      delete this.data._private[key]\n    }\n\n    return this\n  }\n\n  // Public: Emits the 'save' event so that 'brain' scripts can handle\n  // persisting.\n  //\n  // Returns nothing.\n  save() {\n    this.emit(\"save\", this.data)\n  }\n\n  // Public: Emits the 'close' event so that 'brain' scripts can handle closing.\n  //\n  // Returns nothing.\n  close() {\n    clearInterval(this.saveInterval)\n    this.save()\n    this.emit(\"close\")\n  }\n\n  // Public: Enable or disable the automatic saving\n  //\n  // enabled - A boolean whether to autosave or not\n  //\n  // Returns nothing\n  setAutoSave(enabled) {\n    this.autoSave = enabled\n  }\n\n  // Public: Reset the interval between save function calls.\n  //\n  // seconds - An Integer of seconds between saves.\n  //\n  // Returns nothing.\n  resetSaveInterval(seconds) {\n    if (this.saveInterval) {\n      clearInterval(this.saveInterval)\n    }\n    this.saveInterval = setInterval(() => {\n      if (this.autoSave) {\n        this.save()\n      }\n    }, seconds * 1000)\n  }\n\n  // Public: Merge keys loaded from a DB against the in memory representation.\n  //\n  // Returns nothing.\n  //\n  // Caveats: Deeply nested structures don't merge well.\n  mergeData(data) {\n    for (const k in data || {}) {\n      this.data[k] = data[k]\n    }\n\n    // Ensure users in the brain are still User objects.\n    if (data && data.users) {\n      for (const k in data.users) {\n        const user = this.data.users[k]\n        this.data.users[k] = reconstructUserIfNecessary(user, this.getRobot())\n      }\n    }\n\n    this.emit(\"loaded\", this.data)\n  }\n\n  // Public: Get an Array of User objects stored in the brain.\n  //\n  // Returns an Array of User objects.\n  users() {\n    return this.data.users\n  }\n\n  // Public: Get a User object given a unique identifier.\n  //\n  // Returns a User instance of the specified user.\n  userForId(id, options) {\n    let user = this.data.users[id]\n    if (!options) {\n      options = {}\n    }\n    options.robot = this.getRobot()\n\n    if (!user) {\n      user = new User(id, options)\n      this.data.users[id] = user\n    }\n\n    if (options && options.room && (!user.room || user.room !== options.room)) {\n      user = new User(id, options)\n      this.data.users[id] = user\n    }\n    delete options.robot\n\n    return user\n  }\n\n  // Public: Get a User object given a name.\n  //\n  // Returns a User instance for the user with the specified name.\n  userForName(name) {\n    let result = null\n    const lowerName = name.toLowerCase()\n\n    for (const k in this.data.users || {}) {\n      const userName = this.data.users[k].name\n      if (userName != null && userName.toString().toLowerCase() === lowerName) {\n        result = this.data.users[k]\n      }\n    }\n\n    return result\n  }\n\n  // Public: Get all users whose names match fuzzyName. Currently, match\n  // means 'starts with', but this could be extended to match initials,\n  // nicknames, etc.\n  //\n  // Returns an Array of User instances matching the fuzzy name.\n  usersForRawFuzzyName(fuzzyName) {\n    const lowerFuzzyName = fuzzyName.toLowerCase()\n\n    const users = this.data.users || {}\n\n    return Object.keys(users).reduce((result, key) => {\n      const user = users[key]\n      if (user.name.toLowerCase().lastIndexOf(lowerFuzzyName, 0) === 0) {\n        result.push(user)\n      }\n      return result\n    }, [])\n  }\n\n  // Public: If fuzzyName is an exact match for a user, returns an array with\n  // just that user. Otherwise, returns an array of all users for which\n  // fuzzyName is a raw fuzzy match (see usersForRawFuzzyName).\n  //\n  // Returns an Array of User instances matching the fuzzy name.\n  usersForFuzzyName(fuzzyName) {\n    const matchedUsers = this.usersForRawFuzzyName(fuzzyName)\n    const lowerFuzzyName = fuzzyName.toLowerCase()\n    const fuzzyMatchedUsers = matchedUsers.filter(\n      (user) => user.name.toLowerCase() === lowerFuzzyName\n    )\n\n    return fuzzyMatchedUsers.length > 0 ? fuzzyMatchedUsers : matchedUsers\n  }\n}\n\nexport default Brain\n","class Response {\n  // Public: Responses are sent to matching listeners. Messages know about the\n  // content and user that made the original message, and how to reply back to\n  // them.\n  //\n  // robot   - A Robot instance.\n  // message - A Message instance.\n  // match   - A Match object from the successful Regex match.\n  constructor(robot, message, match) {\n    this.robot = robot\n    this.message = message\n    this.match = match\n    this.envelope = {\n      room: this.message.room,\n      user: this.message.user,\n      message: this.message,\n    }\n  }\n\n  // Public: Posts a message back to the chat source\n  //\n  // strings - One or more strings to be posted. The order of these strings\n  //           should be kept intact.\n  //\n  // Returns nothing.\n  send(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(\n      this,\n      [\"send\", { plaintext: true }].concat(strings)\n    )\n  }\n\n  // Public: Posts an emote back to the chat source\n  //\n  // strings - One or more strings to be posted. The order of these strings\n  //           should be kept intact.\n  //\n  // Returns nothing.\n  emote(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(\n      this,\n      [\"emote\", { plaintext: true }].concat(strings)\n    )\n  }\n\n  // Public: Posts a message mentioning the current user.\n  //\n  // strings - One or more strings to be posted. The order of these strings\n  //           should be kept intact.\n  //\n  // Returns nothing.\n  reply(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(\n      this,\n      [\"reply\", { plaintext: true }].concat(strings)\n    )\n  }\n\n  // Public: Posts a topic changing message\n  //\n  // strings - One or more strings to set as the topic of the\n  //           room the bot is in.\n  //\n  // Returns nothing.\n  topic(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(\n      this,\n      [\"topic\", { plaintext: true }].concat(strings)\n    )\n  }\n\n  // Public: Play a sound in the chat source\n  //\n  // strings - One or more strings to be posted as sounds to play. The order of\n  //           these strings should be kept intact.\n  //\n  // Returns nothing\n  play(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(this, [\"play\"].concat(strings))\n  }\n\n  // Public: Posts a message in an unlogged room\n  //\n  // strings - One or more strings to be posted. The order of these strings\n  //           should be kept intact.\n  //\n  // Returns nothing\n  locked(/* ...strings */) {\n    const strings = [].slice.call(arguments)\n    this.runWithMiddleware.apply(\n      this,\n      [\"locked\", { plaintext: true }].concat(strings)\n    )\n  }\n\n  // Private: Call with a method for the given strings using response\n  // middleware.\n  runWithMiddleware(methodName, opts /* , ...strings */) {\n    const self = this\n    const strings = [].slice.call(arguments, 2)\n    const copy = strings.slice(0)\n    let callback\n\n    if (typeof copy[copy.length - 1] === \"function\") {\n      callback = copy.pop()\n    }\n\n    const context = {\n      response: this,\n      strings: copy,\n      method: methodName,\n    }\n\n    if (opts.plaintext != null) {\n      context.plaintext = true\n    }\n\n    function responseMiddlewareDone() {}\n    function runAdapterSend(_, done) {\n      const result = context.strings\n      if (callback != null) {\n        result.push(callback)\n      }\n      self.robot.adapter[methodName].apply(\n        self.robot.adapter,\n        [self.envelope].concat(result)\n      )\n      done()\n    }\n\n    return this.robot.middleware.response.execute(\n      context,\n      runAdapterSend,\n      responseMiddlewareDone\n    )\n  }\n\n  // Public: Picks a random item from the given items.\n  //\n  // items - An Array of items.\n  //\n  // Returns a random item.\n  random(items) {\n    return items[Math.floor(Math.random() * items.length)]\n  }\n\n  // Public: Tell the message to stop dispatching to listeners\n  //\n  // Returns nothing.\n  finish() {\n    this.message.finish()\n  }\n\n  // Public: Creates a scoped http client with chainable methods for\n  // modifying the request. This doesn't actually make a request though.\n  // Once your request is assembled, you can call `get()`/`post()`/etc to\n  // send the request.\n  //\n  // Returns a ScopedClient instance.\n  http(url, options) {\n    return this.robot.http(url, options)\n  }\n}\n\nexport default Response\n","class Message {\n  // Represents an incoming message from the chat.\n  //\n  // user - A User instance that sent the message.\n  constructor(user, done) {\n    this.user = user\n    this.done = done || false\n    this.room = this.user.room\n  }\n\n  // Indicates that no other Listener should be called on this object\n  //\n  // Returns nothing.\n  finish() {\n    this.done = true\n  }\n}\n\nclass TextMessage extends Message {\n  // Represents an incoming message from the chat.\n  //\n  // user - A User instance that sent the message.\n  // text - A String message.\n  // id   - A String of the message ID.\n  constructor(user, text, id) {\n    super(user)\n    this.text = text\n    this.id = id\n  }\n\n  // Determines if the message matches the given regex.\n  //\n  // regex - A Regex to check.\n  //\n  // Returns a Match object or null.\n  match(regex) {\n    return this.text.match(regex)\n  }\n\n  // String representation of a TextMessage\n  //\n  // Returns the message text\n  toString() {\n    return this.text\n  }\n}\n\n// Represents an incoming user entrance notification.\n//\n// user - A User instance for the user who entered.\n// text - Always null.\n// id   - A String of the message ID.\nclass EnterMessage extends Message {}\n\n// Represents an incoming user exit notification.\n//\n// user - A User instance for the user who left.\n// text - Always null.\n// id   - A String of the message ID.\nclass LeaveMessage extends Message {}\n\n// Represents an incoming topic change notification.\n//\n// user - A User instance for the user who changed the topic.\n// text - A String of the new topic\n// id   - A String of the message ID.\nclass TopicMessage extends TextMessage {}\n\nclass CatchAllMessage extends Message {\n  // Represents a message that no matchers matched.\n  //\n  // message - The original message.\n  constructor(message) {\n    super(message.user)\n    this.message = message\n  }\n}\n\nexport {\n  Message,\n  TextMessage,\n  EnterMessage,\n  LeaveMessage,\n  TopicMessage,\n  CatchAllMessage,\n}\n","import async from \"async\"\n\nconst { reduce } = async\n\nclass Middleware {\n  constructor(robot) {\n    this.robot = robot\n    this.stack = []\n  }\n\n  // Public: Execute all middleware in order and call 'next' with the latest\n  // 'done' callback if last middleware calls through. If all middleware is\n  // compliant, 'done' should be called with no arguments when the entire\n  // round trip is complete.\n  //\n  // context - context object that is passed through the middleware stack.\n  //     When handling errors, this is assumed to have a `response` property.\n  //\n  // next(context, done) - Called when all middleware is complete (assuming\n  //     all continued by calling respective 'next' functions)\n  //\n  // done() - Initial (final) completion callback. May be wrapped by\n  //     executed middleware.\n  //\n  // Returns nothing\n  // Returns before executing any middleware\n  execute(context, next, done) {\n    const self = this\n\n    if (done == null) {\n      done = function () {}\n    }\n\n    // Execute a single piece of middleware and update the completion callback\n    // (each piece of middleware can wrap the 'done' callback with additional\n    // logic).\n    function executeSingleMiddleware(doneFunc, middlewareFunc, cb) {\n      // Match the async.reduce interface\n      function nextFunc(newDoneFunc) {\n        cb(null, newDoneFunc || doneFunc)\n      }\n\n      // Catch errors in synchronous middleware\n      try {\n        middlewareFunc(context, nextFunc, doneFunc)\n      } catch (err) {\n        // Maintaining the existing error interface (Response object)\n        self.robot.emit(\"error\", err, context.response)\n        // Forcibly fail the middleware and stop executing deeper\n        doneFunc()\n      }\n    }\n\n    // Executed when the middleware stack is finished\n    function allDone(_, finalDoneFunc) {\n      next(context, finalDoneFunc)\n    }\n\n    // Execute each piece of middleware, collecting the latest 'done' callback\n    // at each step.\n    process.nextTick(\n      reduce.bind(null, this.stack, done, executeSingleMiddleware, allDone)\n    )\n  }\n\n  // Public: Registers new middleware\n  //\n  // middleware - A generic pipeline component function that can either\n  //              continue the pipeline or interrupt it. The function is called\n  //              with (robot, context, next, done). If execution should\n  //              continue (next middleware, final callback), the middleware\n  //              should call the 'next' function with 'done' as an optional\n  //              argument.\n  //              If not, the middleware should call the 'done' function with\n  //              no arguments. Middleware may wrap the 'done' function in\n  //              order to execute logic after the final callback has been\n  //              executed.\n  //\n  // Returns nothing.\n  register(middleware) {\n    if (middleware.length !== 3) {\n      throw new Error(\n        `Incorrect number of arguments for middleware callback (expected 3, got ${middleware.length})`\n      )\n    }\n    this.stack.push(middleware)\n  }\n}\n\nexport default Middleware\n","import { inspect } from \"util\"\n\nimport { TextMessage } from \"./message\"\nimport Middleware from \"./middleware\"\n\nclass Listener {\n  // Listeners receive every message from the chat source and decide if they\n  // want to act on it.\n  // An identifier should be provided in the options parameter to uniquely\n  // identify the listener (options.id).\n  //\n  // robot    - A Robot instance.\n  // matcher  - A Function that determines if this listener should trigger the\n  //            callback.\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is triggered if the incoming message matches.\n  constructor(robot, matcher, options, callback) {\n    this.robot = robot\n    this.matcher = matcher\n    this.options = options\n    this.callback = callback\n\n    if (this.matcher == null) {\n      throw new Error(\"Missing a matcher for Listener\")\n    }\n\n    if (this.callback == null) {\n      this.callback = this.options\n      this.options = {}\n    }\n\n    if (this.options.id == null) {\n      this.options.id = null\n    }\n\n    if (this.callback == null || typeof this.callback !== \"function\") {\n      throw new Error(\"Missing a callback for Listener\")\n    }\n  }\n\n  // Public: Determines if the listener likes the content of the message. If\n  // so, a Response built from the given Message is passed through all\n  // registered middleware and potentially the Listener callback. Note that\n  // middleware can intercept the message and prevent the callback from ever\n  // being executed.\n  //\n  // message - A Message instance.\n  // middleware - Optional Middleware object to execute before the Listener callback\n  // callback - Optional Function called with a boolean of whether the matcher matched\n  //\n  // Returns a boolean of whether the matcher matched.\n  // Returns before executing callback\n  call(message, middleware, didMatchCallback) {\n    // middleware argument is optional\n    if (didMatchCallback == null && typeof middleware === \"function\") {\n      didMatchCallback = middleware\n      middleware = undefined\n    }\n\n    // ensure we have a Middleware object\n    if (middleware == null) {\n      middleware = new Middleware(this.robot)\n    }\n\n    const match = this.matcher(message)\n    if (match) {\n      if (this.regex) {\n        this.robot.logger.debug(\n          `Message '${message}' matched regex /${inspect(\n            this.regex\n          )}/; listener.options = ${inspect(this.options)}`\n        )\n      }\n\n      // special middleware-like function that always executes the Listener's\n      // callback and calls done (never calls 'next')\n      const executeListener = (context, done) => {\n        this.robot.logger.debug(\n          `Executing listener callback for Message '${message}'`\n        )\n        try {\n          this.callback(context.response)\n        } catch (err) {\n          this.robot.emit(\"error\", err, context.response)\n        }\n        done()\n      }\n\n      // When everything is finished (down the middleware stack and back up),\n      // pass control back to the robot\n      const allDone = function allDone() {\n        // Yes, we tried to execute the listener callback (middleware may\n        // have intercepted before actually executing though)\n        if (didMatchCallback != null) {\n          process.nextTick(() => didMatchCallback(true))\n        }\n      }\n\n      const response = new this.robot.Response(this.robot, message, match)\n      middleware.execute({ listener: this, response }, executeListener, allDone)\n      return true\n    }\n    if (didMatchCallback != null) {\n      // No, we didn't try to execute the listener callback\n      process.nextTick(() => didMatchCallback(false))\n    }\n    return false\n  }\n}\n\nclass TextListener extends Listener {\n  // TextListeners receive every message from the chat source and decide if they\n  // want to act on it.\n  //\n  // robot    - A Robot instance.\n  // regex    - A Regex that determines if this listener should trigger the\n  //            callback.\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is triggered if the incoming message matches.\n  constructor(robot, regex, options, callback) {\n    function matcher(message) {\n      if (message instanceof TextMessage) {\n        return message.match(regex)\n      }\n    }\n\n    super(robot, matcher, options, callback)\n    this.regex = regex\n  }\n}\n\nexport { Listener, TextListener }\n","import coffee from \"coffeescript\"\nimport { createRequire } from \"node:module\"\nimport { dirname } from \"path\"\nimport { fileURLToPath } from \"url\"\n\nimport * as fs from \"fs\"\nimport * as path from \"path\"\nimport * as http from \"http\"\nimport { Application } from \"express\"\n\nimport Emittery from \"emittery\"\n\nimport async from \"async\"\nimport Log from \"log\"\nimport * as HttpClient from \"scoped-http-client\"\nimport Adapter from \"./adapter\"\n\nimport Brain from \"./brain\"\nimport Response from \"./response\"\nimport { Listener, TextListener } from \"./listener\"\nimport * as Message from \"./message\"\nimport Middleware from \"./middleware\"\nimport { DataStore } from \"./datastore\"\n\n// Replacement for global __dirname constant in CJS modules.\n// eslint-disable-next-line @typescript-eslint/naming-convention, no-underscore-dangle\nconst __dirname = dirname(fileURLToPath(import.meta.url))\nconst require = createRequire(import.meta.url)\nfunction compile(filename: string) {\n  return coffee.compile(`${fs.readFileSync(filename)}`, {\n    filename,\n    inlineMap: true,\n  })\n}\n\nrequire.extensions[\".coffee\"] = function loadCoffeeScript(m: any, filename) {\n  // Internals, what can ya do.\n  // eslint-disable-next-line no-underscore-dangle\n  m._compile(compile(filename), filename)\n}\n\nconst HUBOT_DEFAULT_ADAPTERS = [\"shell\"]\nconst HUBOT_DOCUMENTATION_SECTIONS = [\n  \"description\",\n  \"dependencies\",\n  \"configuration\",\n  \"commands\",\n  \"notes\",\n  \"author\",\n  \"authors\",\n  \"examples\",\n  \"tags\",\n  \"urls\",\n]\n\n/**\n * Information on a first-class command's parameters. These are commands that\n * may have first-class support in an adapter, such as slash commands in\n * Discord.\n */\ntype CommandParameterInfo = {\n  name: string\n  description?: string\n}\n/**\n * Extracts the names from a (const) list of CommandParameterInfo.\n */\ntype CommandNames<T extends readonly CommandParameterInfo[]> = {\n  [P in keyof T]: P extends keyof [] ? T[P] : T[P][\"name\"]\n}\n/**\n * Extracts the value types from a (const) list of CommandParameterInfo. If no\n * per-command type specialization exists, returns a const list of strings of\n * the same length as the passed const list of parameters. Useful for enforcing\n * e.g. that listeners take the right number of parameters.\n */\ntype CommandValues<T extends readonly CommandParameterInfo[]> = {\n  [P in keyof T]: P extends keyof [] ? T[P] : string\n}\n\nclass Robot<A extends Adapter> {\n  public version = \"0\"\n\n  public events = new Emittery()\n\n  // Public: A wrapper around the EventEmitter API to make usage\n  // semantically better.\n  //\n  // event    - The event name.\n  // listener - A Function that is called with the event parameter\n  //            when event happens.\n  //\n  // Returns nothing.\n  public on = this.events.on.bind(this.events)\n\n  // Public: A wrapper around the EventEmitter API to make usage\n  // semantically better.\n  //\n  // event   - The event name.\n  // args...  - Arguments emitted by the event\n  //\n  // Returns nothing.\n  public emit = this.events.emit.bind(this.events)\n\n  public brain = new Brain(this)\n\n  public adapter: A | undefined\n\n  public datastore: DataStore | undefined\n\n  public Response = Response\n\n  public commands: string[] = []\n\n  public listeners: Listener[] = []\n\n  public server: http.Server | undefined\n\n  public router: Application | undefined\n\n  public middleware = {\n    listener: new Middleware(this),\n    response: new Middleware(this),\n    receive: new Middleware(this),\n  }\n\n  public logger = new Log(process.env.HUBOT_LOG_LEVEL ?? \"info\")\n\n  public pingIntervalId: NodeJS.Timer | undefined\n\n  public globalHttpOptions: Partial<HttpClient.Options> = {}\n\n  public errorHandlers: ((error: Error, res?: Response) => void)[] = []\n\n  #onUncaughtException = (err: Error) => this.emit(\"error\", [err])\n\n  // Robots receive messages from a chat source (Campfire, irc, etc), and\n  // dispatch them to matching listeners.\n  //\n  // adapterPath -  A String of the path to built-in adapters (defaults to src/adapters)\n  // adapter     - A String of the adapter name.\n  // httpd       - A Boolean whether to enable the HTTP daemon.\n  // name        - A String of the robot name, defaults to Hubot.\n  // alias       - A String of the alias of the robot name\n  constructor(\n    public adapterPath: string | undefined,\n    public adapterName: string,\n    public httpd: boolean,\n    public name: string = \"Hubot\",\n    public alias: string | undefined = undefined\n  ) {\n    this.adapterPath = path.join(__dirname, \"adapters\")\n\n    this.parseVersion()\n    if (httpd) {\n      this.setupExpress()\n    }\n\n    this.loadAdapter(adapterName)\n\n    this.on(\"error\", ([err, res]) => this.invokeErrorHandlers(err, res))\n    process.on(\"uncaughtException\", this.#onUncaughtException)\n  }\n\n  urlForMessage(message: Message.Message): string | undefined {\n    return this.adapter!.urlForMessage(message)\n  }\n\n  // Public: Adds a custom Listener with the provided matcher, options, and\n  // callback\n  //\n  // matcher  - A Function that determines whether to call the callback.\n  //            Expected to return a truthy value if the callback should be\n  //            executed.\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object if the\n  //            matcher function returns true.\n  //\n  // Returns nothing.\n  listen(matcher, options, callback) {\n    this.listeners.push(new Listener(this, matcher, options, callback))\n  }\n\n  // Public: Adds a Listener that attempts to match incoming messages based on\n  // a Regex.\n  //\n  // regex    - A Regex that determines if the callback should be called.\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  hear(regex, options, callback) {\n    this.listeners.push(new TextListener(this, regex, options, callback))\n  }\n\n  // Public: Adds a Listener that attempts to match incoming messages directed\n  // at the robot based on a Regex. All regexes treat patterns like they begin\n  // with a '^'\n  //\n  // regex    - A Regex that determines if the callback should be called.\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  respond(regex, options, callback) {\n    this.hear(this.respondPattern(regex), options, callback)\n  }\n\n  /**\n   * Tracks commands that were added before an adapter was loaded. Once the\n   * adapter is loaded, the commands are re-registered to properly notify the\n   * adapter.\n   */\n  #unregisteredCommands: {\n    name: string\n    parameters: CommandParameterInfo[]\n    // The callbacks here have a type dependent on `parameters`, reflected in\n    // the `command` call, but that cannot be expressed here.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callback: (...args: any[]) => void\n  }[] = []\n\n  /**\n   * Add a command native to the adapter with a given name and the provided\n   * command parameter info, which includes a name and description for the\n   * parameter.\n   *\n   * This allows hooking into first-class command support on platforms like\n   * Discord, while allowing Hubot to fall back to a standard `respond` when\n   * needed.\n   */\n  command<Parameters extends CommandParameterInfo[]>(\n    name: string,\n    parameters: Parameters,\n    callback: (...args: CommandValues<Parameters>) => void\n  ) {\n    if (this.adapter && \"registerCommand\" in this.adapter) {\n      this.adapter.registerCommand(name, parameters, callback)\n    } else if (this.adapter) {\n      this.respond(name, {}, callback)\n    } else {\n      // Handle once the adapter is available, in loadAdapter.\n      this.#unregisteredCommands.push({\n        name,\n        parameters,\n        callback: callback as (...args: any[]) => void,\n      })\n    }\n  }\n\n  // Public: Build a regular expression that matches messages addressed\n  // directly to the robot\n  //\n  // regex - A RegExp for the message part that follows the robot's name/alias\n  //\n  // Returns RegExp.\n  respondPattern(regex) {\n    const regexWithoutModifiers = regex.toString().split(\"/\")\n    regexWithoutModifiers.shift()\n    const modifiers = regexWithoutModifiers.pop()\n    const regexStartsWithAnchor =\n      regexWithoutModifiers[0] && regexWithoutModifiers[0][0] === \"^\"\n    const pattern = regexWithoutModifiers.join(\"/\")\n    const name = this.name.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n\n    if (regexStartsWithAnchor) {\n      this.logger.warning(\n        \"Anchors don’t work well with respond, perhaps you want to use 'hear'\"\n      )\n      this.logger.warning(`The regex in question was ${regex.toString()}`)\n    }\n\n    if (!this.alias) {\n      return new RegExp(`^\\\\s*[@]?${name}[:,]?\\\\s*(?:${pattern})`, modifiers)\n    }\n\n    const alias = this.alias.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")\n\n    // matches properly when alias is substring of name\n    if (name.length > alias.length) {\n      return new RegExp(\n        `^\\\\s*[@]?(?:${name}[:,]?|${alias}[:,]?)\\\\s*(?:${pattern})`,\n        modifiers\n      )\n    }\n\n    // matches properly when name is substring of alias\n    return new RegExp(\n      `^\\\\s*[@]?(?:${alias}[:,]?|${name}[:,]?)\\\\s*(?:${pattern})`,\n      modifiers\n    )\n  }\n\n  // Public: Adds a Listener that triggers when anyone enters the room.\n  //\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  enter(options, callback) {\n    this.listen((msg) => msg instanceof Message.EnterMessage, options, callback)\n  }\n\n  // Public: Adds a Listener that triggers when anyone leaves the room.\n  //\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  leave(options, callback) {\n    this.listen((msg) => msg instanceof Message.LeaveMessage, options, callback)\n  }\n\n  // Public: Adds a Listener that triggers when anyone changes the topic.\n  //\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  topic(options, callback) {\n    this.listen((msg) => msg instanceof Message.TopicMessage, options, callback)\n  }\n\n  // Public: Adds an error handler when an uncaught exception or user emitted\n  // error event occurs.\n  //\n  // callback - A Function that is called with the error object.\n  //\n  // Returns nothing.\n  error(callback) {\n    this.errorHandlers.push(callback)\n  }\n\n  // Calls and passes any registered error handlers for unhandled exceptions or\n  // user emitted error events.\n  //\n  // err - An Error object.\n  // res - An optional Response object that generated the error\n  //\n  // Returns nothing.\n  invokeErrorHandlers(error: Error, res?: Response) {\n    this.logger.error(error.stack ?? \"error with no stack\")\n\n    this.errorHandlers.forEach((errorHandler) => {\n      try {\n        errorHandler(error, res)\n      } catch (errorHandlerError) {\n        this.logger.error(\n          `while invoking error handler: ${errorHandlerError}\\n${\n            errorHandlerError instanceof Error ? errorHandlerError.stack : \"\"\n          }`\n        )\n      }\n    })\n  }\n\n  // Public: Adds a Listener that triggers when no other text matchers match.\n  //\n  // options  - An Object of additional parameters keyed on extension name\n  //            (optional).\n  // callback - A Function that is called with a Response object.\n  //\n  // Returns nothing.\n  catchAll(options, callback) {\n    // `options` is optional; need to isolate the real callback before\n    // wrapping it with logic below\n    if (callback == null) {\n      callback = options\n      options = {}\n    }\n\n    this.listen(isCatchAllMessage, options, (msg) => {\n      msg.message = msg.message.message\n      callback(msg)\n    })\n  }\n\n  // Public: Registers new middleware for execution after matching but before\n  // Listener callbacks\n  //\n  // middleware - A function that determines whether or not a given matching\n  //              Listener should be executed. The function is called with\n  //              (context, next, done). If execution should\n  //              continue (next middleware, Listener callback), the middleware\n  //              should call the 'next' function with 'done' as an argument.\n  //              If not, the middleware should call the 'done' function with\n  //              no arguments.\n  //\n  // Returns nothing.\n  listenerMiddleware(middleware) {\n    this.middleware.listener.register(middleware)\n  }\n\n  // Public: Registers new middleware for execution as a response to any\n  // message is being sent.\n  //\n  // middleware - A function that examines an outgoing message and can modify\n  //              it or prevent its sending. The function is called with\n  //              (context, next, done). If execution should continue,\n  //              the middleware should call next(done). If execution should\n  //              stop, the middleware should call done(). To modify the\n  //              outgoing message, set context.string to a new message.\n  //\n  // Returns nothing.\n  responseMiddleware(middleware) {\n    this.middleware.response.register(middleware)\n  }\n\n  // Public: Registers new middleware for execution before matching\n  //\n  // middleware - A function that determines whether or not listeners should be\n  //              checked. The function is called with (context, next, done). If\n  //              ext, next, done). If execution should continue to the next\n  //              middleware or matching phase, it should call the 'next'\n  //              function with 'done' as an argument. If not, the middleware\n  //              should call the 'done' function with no arguments.\n  //\n  // Returns nothing.\n  receiveMiddleware(middleware) {\n    this.middleware.receive.register(middleware)\n  }\n\n  // Public: Passes the given message to any interested Listeners after running\n  //         receive middleware.\n  //\n  // message - A Message instance. Listeners can flag this message as 'done' to\n  //           prevent further execution.\n  //\n  // cb - Optional callback that is called when message processing is complete\n  //\n  // Returns nothing.\n  // Returns before executing callback\n  receive(message, cb) {\n    // When everything is finished (down the middleware stack and back up),\n    // pass control back to the robot\n    this.middleware.receive.execute(\n      { response: new Response(this, message) },\n      this.processListeners.bind(this),\n      cb\n    )\n  }\n\n  // Private: Passes the given message to any interested Listeners.\n  //\n  // message - A Message instance. Listeners can flag this message as 'done' to\n  //           prevent further execution.\n  //\n  // done - Optional callback that is called when message processing is complete\n  //\n  // Returns nothing.\n  // Returns before executing callback\n  processListeners(context, done) {\n    // Try executing all registered Listeners in order of registration\n    // and return after message is done being processed\n    let anyListenersExecuted = false\n\n    async.detectSeries(\n      this.listeners,\n      (listener, done) => {\n        try {\n          listener.call(\n            context.response.message,\n            this.middleware.listener,\n            (listenerExecuted) => {\n              anyListenersExecuted = anyListenersExecuted || listenerExecuted\n              // Defer to the event loop at least after every listener so the\n              // stack doesn't get too big\n              process.nextTick(() =>\n                // Stop processing when message.done == true\n                done(context.response.message.done)\n              )\n            }\n          )\n        } catch (err) {\n          this.emit(\"error\", [\n            err,\n            new this.Response(context.response.message, []),\n          ])\n          // Continue to next listener when there is an error\n          done(null, false)\n        }\n      },\n      // Ignore the result ( == the listener that set message.done = true)\n      (_) => {\n        // If no registered Listener matched the message\n\n        if (\n          !(context.response.message instanceof Message.CatchAllMessage) &&\n          !anyListenersExecuted\n        ) {\n          this.logger.debug(\"No listeners executed; falling back to catch-all\")\n          this.receive(\n            new Message.CatchAllMessage(context.response.message),\n            done\n          )\n        } else if (done != null) {\n          process.nextTick(done)\n        }\n      }\n    )\n  }\n\n  // Public: Loads a file in path.\n  //\n  // filepath - A String path on the filesystem.\n  // filename - A String filename in path on the filesystem.\n  //\n  // Returns nothing.\n  async loadFile(filepath, filename) {\n    const ext = path.extname(filename)\n    const full = path.join(filepath, path.basename(filename, ext))\n\n    // see https://github.com/hubotio/hubot/issues/1355\n    if (\n      !require.extensions[ext] &&\n      // Explicitly support .ts, since we use esm-loader-typescript loader in\n      // bin/hubot to properly support loading transpiled modern ESM\n      // TypeScript.\n      ![\".mjs\", \".ts\"].includes(ext)\n    ) {\n      // eslint-disable-line\n      return\n    }\n\n    try {\n      const script =\n        ext === \".mjs\" || ext === \".ts\"\n          ? (await import(full + ext)).default\n          : // The whole point here is to require dynamically <_<\n            // eslint-disable-next-line import/no-dynamic-require\n            require(full + ext)\n\n      if (typeof script === \"function\") {\n        script(this)\n        this.parseHelp(path.join(filepath, filename))\n      } else {\n        this.logger.warning(\n          `Expected ${full} to assign a function to module.exports, got ${typeof script}`\n        )\n      }\n    } catch (error) {\n      this.logger.error(\n        `Unable to load ${full}: ${error instanceof Error ? error.stack : \"\"}`\n      )\n      process.exit(1)\n    }\n  }\n\n  // Public: Loads every script in the given path.\n  //\n  // path - A String path on the filesystem.\n  //\n  // Returns nothing.\n  load(path) {\n    this.logger.debug(`Loading scripts from ${path}`)\n\n    if (fs.existsSync(path)) {\n      fs.readdirSync(path)\n        .sort()\n        .map((file) => this.loadFile(path, file))\n    }\n  }\n\n  // Public: Load scripts specified in the `hubot-scripts.json` file.\n  //\n  // path    - A String path to the hubot-scripts files.\n  // scripts - An Array of scripts to load.\n  //\n  // Returns nothing.\n  loadHubotScripts(path, scripts) {\n    this.logger.debug(`Loading hubot-scripts from ${path}`)\n    Array.from(scripts).map((script) => this.loadFile(path, script))\n  }\n\n  // Public: Load scripts from packages specified in the\n  // `external-scripts.json` file.\n  //\n  // packages - An Array of packages containing hubot scripts to load.\n  //\n  // Returns nothing.\n  async loadExternalScripts(packages: string[] | { [pkg: string]: object }) {\n    this.logger.debug(\"Loading external-scripts from npm packages\")\n\n    try {\n      if (Array.isArray(packages)) {\n        await Promise.all(\n          // We're in dynamic require land!\n          // eslint-disable-next-line import/no-dynamic-require\n          packages.map(async (pkg) => require(pkg)(this))\n        )\n        return\n      }\n\n      await Promise.all(\n        Object.keys(packages).map(async (key) =>\n          // We're in dynamic require land!\n          // eslint-disable-next-line import/no-dynamic-require\n          require(key)(this, packages[key])\n        )\n      )\n    } catch (error) {\n      this.logger.error(\n        `Error loading scripts from npm package - ${\n          error instanceof Error ? error.stack : \"(unknown)\"\n        }`\n      )\n\n      process.exit(1)\n    }\n  }\n\n  // Setup the Express server's defaults.\n  //\n  // Returns nothing.\n  async setupExpress() {\n    const user = process.env.EXPRESS_USER\n    const pass = process.env.EXPRESS_PASSWORD\n    const stat = process.env.EXPRESS_STATIC\n    const port = parseInt(\n      process.env.EXPRESS_PORT ?? process.env.PORT ?? \"8080\",\n      10\n    )\n    const address =\n      process.env.EXPRESS_BIND_ADDRESS || process.env.BIND_ADDRESS || \"0.0.0.0\"\n    const limit = process.env.EXPRESS_LIMIT || \"100kb\"\n    const paramLimit =\n      process.env.EXPRESS_PARAMETER_LIMIT === undefined\n        ? 1000\n        : parseInt(process.env.EXPRESS_PARAMETER_LIMIT, 10)\n\n    const express = (await import(\"express\")).default\n    const multipart = (await import(\"connect-multiparty\")).default\n\n    const app = express()\n\n    app.use((req, res, next) => {\n      res.setHeader(\"X-Powered-By\", `hubot/${this.name}`)\n      return next()\n    })\n\n    if (user && pass) {\n      app.use((express as any).basicAuth(user, pass))\n    }\n    app.use((express as any).query())\n\n    app.use(express.json())\n    app.use(\n      express.urlencoded({ limit, parameterLimit: paramLimit, extended: true })\n    )\n    // replacement for deprecated express.multipart/connect.multipart\n    // limit to 100mb, as per the old behavior\n    app.use(multipart({ maxFilesSize: 100 * 1024 * 1024 }))\n\n    if (stat) {\n      app.use(express.static(stat))\n    }\n\n    try {\n      this.server = app.listen(port, address)\n      this.router = app\n    } catch (error) {\n      const err = error\n      this.logger.error(\n        `Error trying to start HTTP server: ${err}\\n${\n          err instanceof Error ? err.stack : \"\"\n        }`\n      )\n      process.exit(1)\n    }\n\n    let herokuUrl = process.env.HEROKU_URL\n\n    if (herokuUrl) {\n      if (!/\\/$/.test(herokuUrl)) {\n        herokuUrl += \"/\"\n      }\n      this.pingIntervalId = setInterval(() => {\n        HttpClient.create(`${herokuUrl}hubot/ping`).post()(\n          (_err, res, body) => {\n            this.logger.info(\"keep alive ping!\")\n          }\n        )\n      }, 5 * 60 * 1000)\n    }\n  }\n\n  // Load the adapter Hubot is going to use.\n  //\n  // path    - A String of the path to adapter if local.\n  // adapter - A String of the adapter name to use.\n  //\n  // Returns nothing.\n  async loadAdapter(adapter: string) {\n    this.logger.debug(`Loading adapter ${adapter}`)\n\n    // Give adapter loading event handlers a chance to attach.\n    await Promise.resolve()\n\n    const path =\n      Array.from(HUBOT_DEFAULT_ADAPTERS).indexOf(adapter) !== -1\n        ? `${this.adapterPath}/${adapter}`\n        : `hubot-${adapter}`\n\n    try {\n      this.adapter = (await import(path)).use(this)\n    } catch (err) {\n      this.logger.error(\n        `Cannot load adapter ${adapter} as ES module - ${err}${\n          err instanceof Error ? `\\n\\n${err.stack}` : \"\"\n        }`\n      )\n      process.exit(1)\n    }\n\n    if (this.adapter !== null && this.adapter !== undefined) {\n      this.#unregisteredCommands.forEach(({ name, parameters, callback }) =>\n        this.command(name, parameters, callback)\n      )\n      this.adapter.on(\"connected\", (...args) => this.emit(\"connected\", ...args))\n      this.emit(\"adapter-initialized\", adapter)\n    }\n  }\n\n  // Public: Help Commands for Running Scripts.\n  //\n  // Returns an Array of help commands for running scripts.\n  helpCommands() {\n    return this.commands.sort()\n  }\n\n  // Private: load help info from a loaded script.\n  //\n  // path - A String path to the file on disk.\n  //\n  // Returns nothing.\n  async parseHelp(path: string) {\n    const scriptDocumentation: { [section: string]: string[] } = {}\n    const resolvedPathURLString = await import.meta.resolve?.(path)\n    if (resolvedPathURLString === undefined) {\n      return\n    }\n    const body = fs.readFileSync(new URL(resolvedPathURLString), \"utf-8\")\n\n    const useStrictHeaderRegex = /^[\"']use strict['\"];?\\s+/\n    const lines = body\n      .replace(useStrictHeaderRegex, \"\")\n      .split(/(?:\\n|\\r\\n|\\r)/)\n      .reduce(toHeaderCommentBlock, { lines: [], isHeader: true })\n      .lines.filter(Boolean) // remove empty lines\n    let currentSection = null\n    let nextSection\n\n    this.logger.debug(`Parsing help for ${path}`)\n\n    for (let i = 0, line; i < lines.length; i++) {\n      line = lines[i]\n\n      if (line.toLowerCase() === \"none\") {\n        continue\n      }\n\n      nextSection = line.toLowerCase().replace(\":\", \"\")\n      if (\n        Array.from(HUBOT_DOCUMENTATION_SECTIONS).indexOf(nextSection) !== -1\n      ) {\n        currentSection = nextSection\n        scriptDocumentation[nextSection] = []\n      } else if (currentSection) {\n        scriptDocumentation[currentSection].push(line)\n        if (currentSection === \"commands\") {\n          this.commands.push(line)\n        }\n      }\n    }\n\n    if (currentSection === null) {\n      this.logger.info(`${path} is using deprecated documentation syntax`)\n      scriptDocumentation.commands = []\n      for (let i = 0, line, cleanedLine; i < lines.length; i++) {\n        line = lines[i]\n        if (line.match(\"-\")) {\n          continue\n        }\n\n        cleanedLine = line\n          .slice(2, +line.length + 1 || 9e9)\n          .replace(/^hubot/i, this.name)\n          .trim()\n        scriptDocumentation.commands.push(cleanedLine)\n        this.commands.push(cleanedLine)\n      }\n    }\n  }\n\n  // Public: A helper send function which delegates to the adapter's send\n  // function.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each message to send.\n  //\n  // Returns nothing.\n  send(envelope: any, ...strings: string[]) {\n    this.adapter!.send.apply(this.adapter, [envelope].concat(strings))\n  }\n\n  // Public: A helper reply function which delegates to the adapter's reply\n  // function.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each message to send.\n  //\n  // Returns nothing.\n  reply(envelope: any, ...strings: string[]) {\n    this.adapter!.reply.apply(this.adapter, [envelope].concat(strings))\n  }\n\n  // Public: A helper send function to message a room that the robot is in.\n  //\n  // room    - String designating the room to message.\n  // strings - One or more Strings for each message to send.\n  //\n  // Returns nothing.\n  messageRoom(room: string, ...strings: string[]) {\n    const envelope = { room }\n\n    this.adapter!.send.apply(this.adapter, [envelope as any].concat(strings))\n  }\n\n  // Public: A wrapper around the EventEmitter API to make usage\n  // semantically better.\n  //\n  // event    - The event name.\n  // listener - A Function that is called with the event parameter\n  //            when event happens.\n  //\n  // Returns nothing.\n  once(event: string, callback: () => void): void {\n    this.events.once(event).then(callback)\n  }\n\n  // Public: Kick off the event loop for the adapter\n  //\n  // Returns nothing.\n  run() {\n    this.emit(\"running\")\n\n    this.adapter!.run()\n  }\n\n  // Public: Gracefully shutdown the robot process\n  //\n  // Returns nothing.\n  shutdown() {\n    if (this.pingIntervalId !== undefined) {\n      clearInterval(this.pingIntervalId)\n    }\n    process.removeListener(\"uncaughtException\", this.#onUncaughtException)\n    this.adapter!.close()\n    if (this.server) {\n      this.server.close()\n    }\n\n    this.brain.close()\n  }\n\n  // Public: The version of Hubot from npm\n  //\n  // Returns a String of the version number.\n  async parseVersion() {\n    // FIXME convert to fs.readFileSync + JSON.parse, eh?\n    // eslint-disable-next-line import/no-dynamic-require\n    const pkg = require(path.join(__dirname, \"..\", \"package.json\"))\n    this.version = pkg.version\n\n    return this.version\n  }\n\n  // Public: Creates a scoped http client with chainable methods for\n  // modifying the request. This doesn't actually make a request though.\n  // Once your request is assembled, you can call `get()`/`post()`/etc to\n  // send the request.\n  //\n  // url - String URL to access.\n  // options - Optional options to pass on to the client\n  //\n  // Examples:\n  //\n  //     robot.http(\"http://example.com\")\n  //       # set a single header\n  //       .header('Authorization', 'bearer abcdef')\n  //\n  //       # set multiple headers\n  //       .headers(Authorization: 'bearer abcdef', Accept: 'application/json')\n  //\n  //       # add URI query parameters\n  //       .query(a: 1, b: 'foo & bar')\n  //\n  //       # make the actual request\n  //       .get() (err, res, body) ->\n  //         console.log body\n  //\n  //       # or, you can POST data\n  //       .post(data) (err, res, body) ->\n  //         console.log body\n  //\n  //    # Can also set options\n  //    robot.http(\"https://example.com\", {rejectUnauthorized: false})\n  //\n  // Returns a ScopedClient instance.\n  http(url, options) {\n    const httpOptions = extend({}, this.globalHttpOptions, options)\n\n    return HttpClient.create(url, httpOptions).header(\n      \"User-Agent\",\n      `Hubot/${this.version}`\n    )\n  }\n}\n\nexport default Robot\n\nfunction isCatchAllMessage(message) {\n  return message instanceof Message.CatchAllMessage\n}\n\nfunction toHeaderCommentBlock(block, currentLine) {\n  if (!block.isHeader) {\n    return block\n  }\n\n  if (isCommentLine(currentLine)) {\n    block.lines.push(removeCommentPrefix(currentLine))\n  } else {\n    block.isHeader = false\n  }\n\n  return block\n}\n\nfunction isCommentLine(line) {\n  return /^(#|\\/\\/)/.test(line)\n}\n\nfunction removeCommentPrefix(line) {\n  return line.replace(/^[#/]+\\s*/, \"\")\n}\n\nfunction extend(obj: any, ...sources: any[]) {\n  sources.forEach((source) => {\n    if (typeof source !== \"object\") {\n      return\n    }\n\n    Object.keys(source).forEach((key) => {\n      obj[key] = source[key]\n    })\n  })\n\n  return obj\n}\n","import Emittery from \"emittery\"\n\nclass Adapter extends Emittery {\n  // An adapter is a specific interface to a chat source for robots.\n  //\n  // robot - A Robot instance.\n  constructor(robot) {\n    super()\n    this.robot = robot\n  }\n\n  // Public: Method for fetching a URL to a given message. Extend this.\n  //\n  // message  - The message to link to.\n  //\n  // Returns a string that is a valid, full URL to the given message, or\n  // undefined if the adapter does not support generating a link to that message.\n  urlForMessage(message) {\n    return \"\"\n  }\n\n  // Public: Raw method for building a reply and sending it back to the chat\n  // source. Extend this.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each reply to send.\n  //\n  // Returns nothing.\n  // registerCommand<Parameters extends CommandParameterInfo[]>(name: string, parameters: Parameters, callback: (...args: CommandValues<Parameters>) => void) {\n  registerCommand(name, parameters, callback) {}\n\n  // Public: Raw method for sending data back to the chat source. Extend this.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each message to send.\n  //\n  // Returns nothing.\n  send(envelope, ...strings) {}\n\n  // Public: Raw method for sending emote data back to the chat source.\n  // Defaults as an alias for send\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each message to send.\n  //\n  // Returns nothing.\n  emote(envelope, ...strings) {\n    return this.send(envelope, ...strings)\n  }\n\n  // Public: Raw method for building a reply and sending it back to the chat\n  // source. Extend this.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more Strings for each reply to send.\n  //\n  // Returns nothing.\n  reply(envelope, ...strings) {}\n\n  // Public: Raw method for setting a topic on the chat source. Extend this.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One more more Strings to set as the topic.\n  //\n  // Returns nothing.\n  topic(envelope, ...strings) {}\n\n  // Public: Raw method for playing a sound in the chat source. Extend this.\n  //\n  // envelope - A Object with message, room and user details.\n  // strings  - One or more strings for each play message to send.\n  //\n  // Returns nothing\n  play(envelope, ...strings) {}\n\n  // Public: Raw method for invoking the bot to run. Extend this.\n  //\n  // Returns nothing.\n  run() {}\n\n  // Public: Raw method for shutting the bot down. Extend this.\n  //\n  // Returns nothing.\n  close() {}\n}\n\nexport default Adapter\n","import User from \"./user\"\nimport Brain from \"./brain\"\nimport Robot from \"./robot\"\nimport Adapter from \"./adapter\"\nimport Response from \"./response\"\nimport { Listener } from \"./listener\"\nimport {\n  Message,\n  TextMessage,\n  EnterMessage,\n  LeaveMessage,\n  TopicMessage,\n  CatchAllMessage,\n} from \"./message\"\nimport { DataStore, DataStoreUnavailable } from \"./datastore\"\n\nfunction loadBot(\n  adapterPath: string | undefined,\n  adapterName: string,\n  enableHttpd: boolean,\n  botName: string,\n  botAlias: string | undefined\n) {\n  return new Robot(adapterPath, adapterName, enableHttpd, botName, botAlias)\n}\n\nexport {\n  User,\n  Brain,\n  Robot,\n  Adapter,\n  Response,\n  Listener,\n  Message,\n  TextMessage,\n  EnterMessage,\n  LeaveMessage,\n  TopicMessage,\n  CatchAllMessage,\n  DataStore,\n  DataStoreUnavailable,\n  loadBot,\n}\n"],"names":["DataStore","constructor","robot","set","key","value","_set","setObject","objectKey","get","then","object","target","setArray","Array","isArray","push","apply","concat","_get","getObject","table","Promise","reject","DataStoreUnavailable","Error","User","id","options","_getRobot","Object","keys","forEach","name","toString","_checkDatastoreAvailable","_getDatastore","_constructKey","datastore","reconstructUserIfNecessary","user","newUser","Brain","Emittery","data","users","_private","getRobot","autoSave","on","resetSaveInterval","pair","emit","remove","save","close","clearInterval","saveInterval","setAutoSave","enabled","seconds","setInterval","mergeData","k","userForId","room","userForName","result","lowerName","toLowerCase","userName","usersForRawFuzzyName","fuzzyName","lowerFuzzyName","reduce","lastIndexOf","usersForFuzzyName","matchedUsers","fuzzyMatchedUsers","filter","length","Response","message","match","envelope","send","strings","slice","call","arguments","runWithMiddleware","plaintext","emote","reply","topic","play","locked","methodName","opts","self","copy","callback","pop","context","response","method","responseMiddlewareDone","runAdapterSend","_","done","adapter","middleware","execute","random","items","Math","floor","finish","http","url","Message","TextMessage","text","regex","EnterMessage","LeaveMessage","TopicMessage","CatchAllMessage","async","Middleware","stack","next","executeSingleMiddleware","doneFunc","middlewareFunc","cb","nextFunc","newDoneFunc","err","allDone","finalDoneFunc","process","nextTick","bind","register","Listener","matcher","didMatchCallback","undefined","logger","debug","inspect","executeListener","listener","TextListener","__dirname","dirname","fileURLToPath","import","meta","require","createRequire","compile","filename","coffee","fs","readFileSync","inlineMap","extensions","loadCoffeeScript","m","_compile","HUBOT_DEFAULT_ADAPTERS","HUBOT_DOCUMENTATION_SECTIONS","_onUncaughtException","_classPrivateFieldLooseKey","_unregisteredCommands","Robot","adapterPath","adapterName","httpd","alias","_process$env$HUBOT_LO","version","events","brain","commands","listeners","server","router","receive","Log","env","HUBOT_LOG_LEVEL","pingIntervalId","globalHttpOptions","errorHandlers","defineProperty","writable","path","join","parseVersion","setupExpress","loadAdapter","res","invokeErrorHandlers","_classPrivateFieldLooseBase","urlForMessage","listen","hear","respond","respondPattern","command","parameters","registerCommand","regexWithoutModifiers","split","shift","modifiers","regexStartsWithAnchor","pattern","replace","warning","RegExp","enter","msg","leave","error","_error$stack","errorHandler","errorHandlerError","catchAll","isCatchAllMessage","listenerMiddleware","responseMiddleware","receiveMiddleware","processListeners","anyListenersExecuted","detectSeries","listenerExecuted","loadFile","filepath","ext","extname","full","basename","includes","script","default","parseHelp","exit","load","existsSync","readdirSync","sort","map","file","loadHubotScripts","scripts","from","loadExternalScripts","packages","all","pkg","_ref","_process$env$EXPRESS_","EXPRESS_USER","pass","EXPRESS_PASSWORD","stat","EXPRESS_STATIC","port","parseInt","EXPRESS_PORT","PORT","address","EXPRESS_BIND_ADDRESS","BIND_ADDRESS","limit","EXPRESS_LIMIT","paramLimit","EXPRESS_PARAMETER_LIMIT","express","multipart","app","use","req","setHeader","basicAuth","query","json","urlencoded","parameterLimit","extended","maxFilesSize","static","herokuUrl","HEROKU_URL","test","HttpClient","create","post","_err","body","info","resolve","indexOf","args","helpCommands","_import$meta$resolve","_import$meta","scriptDocumentation","resolvedPathURLString","URL","useStrictHeaderRegex","lines","toHeaderCommentBlock","isHeader","Boolean","currentSection","nextSection","i","line","cleanedLine","trim","messageRoom","once","event","run","shutdown","removeListener","httpOptions","extend","header","block","currentLine","isCommentLine","removeCommentPrefix","obj","sources","source","Adapter","loadBot","enableHttpd","botName","botAlias"],"mappings":"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"}